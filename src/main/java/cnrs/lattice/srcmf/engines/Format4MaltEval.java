package cnrs.lattice.srcmf.engines;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang3.ArrayUtils;

import com.google.common.base.Joiner;

import cnrs.lattice.engines.readers.Reader;
import cnrs.lattice.engines.readers.Writer;
import cnrs.lattice.models.Word;
import cnrs.lattice.tools.utils.Tools;

public class Format4MaltEval {

	/**
	 * Remove false empty lines generated by LibreOffice : ex : "\t\t\t\t\n"
	 * 
	 * @param str
	 * @return
	 */
	public static String removeFalseEmptyLines(String str) {
		return str.replaceAll("\t+\n", "\n");
	}

	/**
	 * Remove the first line of a string. Useful for back conversion tsv with
	 * cols headers to standard data tsv.
	 * 
	 * @param str
	 * @return
	 * @throws IOException
	 */
	public static String removeFirstLine(String str) throws IOException {
		Joiner joiner = Joiner.on("\n");
		List<String> lines = Tools.StringToList(str);
		lines.remove(0);
		str = joiner.join(lines);
		return str;
	}

	public static String convert(String path) throws Exception {
		// String path =
		// "/home/gael/Documents/SRCMF/PostTLT2015/Lakme/livrables/lakme_otinel_parsing_gpos/results/parsed_with_glemma_ppos/grand_ON_otinel.tsv";
		// engine1.getDocument().getElementById("alertfc1").getTextContent();
		// String path2 =
		// "/home/gael/Documents/SRCMF/PostTLT2015/Lakme/livrables/lakme_otinel_parsing_gpos/results/parsed_with_glemma_ppos/petit_ON_otinel.tsv";
		// engine1.getDocument().getElementById("alertfc2").getTextContent();
		Reader reader = new Reader();
		String content = Tools.readFile(path);
		content = removeFirstLine(content);
		content = removeFalseEmptyLines(content);
		List<Word> words = reader.readConllLakme(content);
		Writer writer = new Writer();
		String malt = writer.toMaltEvalP(words, true);
		return malt;
	}

	public static String convert2malt(HashMap<String, Integer> map, String path) throws Exception {
		String content = Tools.readFile(path);
//		content = removeFirstLine(content);
		content = removeFalseEmptyLines(content);
//		Tools.ecrire("temp", content);
		Tools.tempFile("temp", ".temp", content);
		List<String> lines = Tools.StringToList(content);
		StringBuilder formatMalt = new StringBuilder();
		
		for (String line : lines) {
			String[] values = line.split("\t");
			Joiner joiner = Joiner.on("\t");

			if (line.length() == 0) {
					formatMalt.append("\n");
				continue;
			}
			String[] valuesMalt = ArrayUtils.toArray(values[map.get("id")], values[map.get("form")],
					values[map.get("lemma")], values[map.get("cpostag")], values[map.get("postag")],
					values[map.get("feats")], values[map.get("head")], values[map.get("deprel")],
					values[map.get("phead")], values[map.get("pdeprel")]);
			formatMalt.append(joiner.join(valuesMalt) + "\n");
		}
		return formatMalt.toString();
	}
}
